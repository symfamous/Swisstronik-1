{"_id":"@solana/buffer-layout","_rev":"18-5b53a91c1b30b483a933c10c92ac70f9","name":"@solana/buffer-layout","description":"Translation between JavaScript values and Buffers","dist-tags":{"latest":"4.0.1"},"versions":{"3.0.0":{"name":"@solana/buffer-layout","version":"3.0.0","keywords":["Buffer","struct","endian","pack data"],"author":{"name":"Peter A. Bigot","email":"pab@pabigot.com"},"license":"MIT","_id":"@solana/buffer-layout@3.0.0","maintainers":[{"name":"jordansexton","email":"jordan@jordansexton.com"},{"name":"trent-solana","email":"trent@solana.com"},{"name":"ryoqun","email":"ryoqun@gmail.com"},{"name":"bartosz-lipinski","email":"bartosz@solana.com"},{"name":"mvines","email":"mvines@gmail.com"},{"name":"jstarry","email":"Justin.m.starry@gmail.com"},{"name":"danpaul000","email":"dan@solana.com"},{"name":"jack-solana","email":"jack@solana.com"},{"name":"tyera","email":"tyera@solana.com"},{"name":"joncinque","email":"me@jonc.dev"}],"homepage":"https://github.com/pabigot/buffer-layout","bugs":{"url":"https://github.com/pabigot/buffer-layout/issues"},"dist":{"shasum":"b9353caeb9a1589cb77a1b145bcb1a9a93114326","tarball":"https://registry.npmjs.org/@solana/buffer-layout/-/buffer-layout-3.0.0.tgz","fileCount":6,"integrity":"sha512-MVdgAKKL39tEs0l8je0hKaXLQFb7Rdfb0Xg2LjFZd8Lfdazkg6xiS98uAZrEKvaoF3i4M95ei9RydkGIDMeo3w==","signatures":[{"sig":"MEQCIGl2WTVkelsPWyWZ8QVvAhVl+zWzSdw+2ybqYbifM7iOAiAesnCHMkBaR2KJdYJdYIyJYfGbpJElilSR8R4J0DRA3g==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":214029,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg54SGCRA9TVsSAnZWagAAbsIP/0QyNUpYD1QjZFoO7AKr\n1tvU5yYga5Lxnd7kUiL1EEHZRTf0oBFTdR8ie6s+Hb/z9gn3vjuHeZ4Ig2+G\nA4oSTB5w9poKbAMqZL8p4KDCOiqT0uhR1MT+N8z9/j6s0abR+4Tm7QPPD89l\nGGwE38zMGp2jsTF37iWj0G4ZnIXNTTrtKwhwoCU5dxgbdbYU8W7Cqhr3w59p\nB42ie0d4na+WZr4mmnkXqztcbaz0A9PwA6G76pwoxSpmhz6QmyMSwQqheCos\nzbxGFfhMTFpZQly8dkpsnp8/K6KIsIgk+SKlYsBtAJ9rdIgtZSUN7+mI1usx\nFoWVi8eO4YMCP9cD5fHUqiRL/ptHr/Ki/MOLMOhe1wrqiUcIVnu9KfQvPxZx\nHnpAaQtqpJ3Lzlp/2QnRnaZeOzhG9EFLcxi7v/WxC1EicCbLwh+BV+618pe5\nn3thXKJuyNZVKKGHNdpSs7o/uTLj79tjn/FVIOZ+BuE/EMQBB5DYGGVFw2cr\n1N6Hs5cjtGTStx07LH0umfQfEoRSTJG/n+z5Jt+fc55OrMY1OtSjjiTf1Sql\ndMS7xEg0T1J/aBpxw0UdTojo5OSFtsHQCFPBucb38VskyVLPe8HyOf44lKSD\nTS+c0bdMEKUaK+0BoQ95RDniiTk/tkA3m2ABILgw41KE79I6yGeWrg4ZQTLR\nzx5r\r\n=Kuuf\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./lib/Layout.js","types":"./lib/Layout.d.ts","engines":{"node":">=5.10"},"gitHead":"bc203631cb78a8dfa423b65129ee444c532e70af","scripts":{"test":"npm run build && mocha -u tdd","build":"tsc","jsdoc":"jsdoc -c jsdoc/conf.json","eslint":"eslint src/ --ext .ts","prepare":"npm run build","coverage":"npm run build && istanbul cover _mocha -- -u tdd","coveralls":"npm run build && istanbul cover _mocha --report lcovonly -- -u tdd && cat ./coverage/lcov.info | coveralls"},"_npmUser":{"name":"jstarry","email":"Justin.m.starry@gmail.com"},"repository":{"url":"git+https://github.com/pabigot/buffer-layout.git","type":"git"},"_npmVersion":"7.18.1","description":"Translation between JavaScript values and Buffers","directories":{},"_nodeVersion":"14.15.5","dependencies":{"buffer":"~6.0.3"},"_hasShrinkwrap":false,"devDependencies":{"jsdoc":"~3.5.5","mocha":"~5.0.4","eslint":"~7.30.0","lodash":"~4.17.5","istanbul":"~0.4.5","coveralls":"^3.0.0","typescript":"~4.3.5","@typescript-eslint/parser":"^4.28.2","@typescript-eslint/eslint-plugin":"^4.28.2"},"_npmOperationalInternal":{"tmp":"tmp/buffer-layout_3.0.0_1625785478325_0.2210337334268646","host":"s3://npm-registry-packages"}},"4.0.0":{"name":"@solana/buffer-layout","version":"4.0.0","keywords":["Buffer","struct","endian","pack data"],"author":{"name":"Peter A. Bigot","email":"pab@pabigot.com"},"license":"MIT","_id":"@solana/buffer-layout@4.0.0","maintainers":[{"name":"seanyoung","email":"sean@mess.org"},{"name":"mvines","email":"mvines@gmail.com"},{"name":"jstarry","email":"Justin.m.starry@gmail.com"},{"name":"danpaul000","email":"dan@solana.com"},{"name":"jack-solana","email":"jack@solana.com"},{"name":"tyera","email":"tyera@solana.com"},{"name":"joncinque","email":"me@jonc.dev"},{"name":"bartosz-lipinski","email":"bartosz@solana.com"},{"name":"ryoqun","email":"ryoqun@gmail.com"},{"name":"trent-solana","email":"trent@solana.com"},{"name":"jordansexton","email":"jordan@jordansexton.com"}],"homepage":"https://github.com/pabigot/buffer-layout","bugs":{"url":"https://github.com/pabigot/buffer-layout/issues"},"dist":{"shasum":"75b1b11adc487234821c81dfae3119b73a5fd734","tarball":"https://registry.npmjs.org/@solana/buffer-layout/-/buffer-layout-4.0.0.tgz","fileCount":7,"integrity":"sha512-lR0EMP2HC3+Mxwd4YcnZb0smnaDw7Bl2IQWZiTevRH5ZZBZn6VRWn3/92E3qdU4SSImJkA6IDHawOHAnx/qUvQ==","signatures":[{"sig":"MEYCIQDWlBTviCLBzLpctzwYe+TtzX3KIxTehQsFpto6wQ0R9AIhAOL10bpsVPS+6JXTWa/0BYsSpOe5UupGZPOUzRn1vVS3","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":207954,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhuQyiCRA9TVsSAnZWagAAqREP/1tb4tTjqUUgnSHNyamE\n2NPf7Ubhntq/MjPFkNi/zG8J+KEDSCKMscejlM+WQQXq+iPWdLZOCrd52o3J\naUYNrD43V6JOIp6IP5lZW2isDRNokI7hl51dJFTQXID0kq+HbggkrAy2CS/d\n6koqzLTSPeiC1BUcgI4T9IUnNFpuxq5CCYtFz5Y5LSOBS0r9LPFrah2cv6b4\npCJaTc3geJ1WFPrggnrIQzYaJXBhRTEDSuEDP3buuc4lpuwj9po48LkO+qDp\nbfer8Kr/diealEfIEX6joNqicl4Iv+U7NYPAOnE/5LI0r+e00e9KYfXSU7mK\nkwexZpT/66RAmAENS8oZcLwKxcd0rACmN/+dIROF2mUfl0c6U/JtqMgCKf7f\nwaPMFcDtHCDL8X1TmUQ6+kj70PzBUHqCr8LNFRKrzfYljw5TvZ2Gcs4u9Aqj\nQXKaSzLZMOU1aZeoUBdiU4qHZ0eABtc4UCp3vvRP7+rwCzIXnl20sftpx1ob\nc3LVWwVMw5EdqGdmozztX1odDyA8o6jzDGqstFDWwjalj2dj+JGWqzhXox5B\nhXvybozd00/iHi0H3XKLUoI/mZ63wEtqaRvdtSQgSsaTl8CugQVXIA/jfEbA\n6GMDsxHRvAqva4y4WYDSiV7CW7sTjGRBEuTwW9q2U569TApW2LFDTq48BjB/\naLyS\r\n=dC0G\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./lib/Layout.js","types":"./lib/Layout.d.ts","engines":{"node":">=5.10"},"gitHead":"e58f24aacf7583a9e30e35de359562311794d694","scripts":{"docs":"shx rm -rf docs && typedoc","test":"npm run build && mocha -u tdd","build":"tsc","jsdoc":"jsdoc -c jsdoc/conf.json","pages":"gh-pages --dist docs --dotfiles","eslint":"eslint src/ --ext .ts","prepare":"npm run build","coverage":"npm run build && istanbul cover _mocha -- -u tdd","coveralls":"npm run build && istanbul cover _mocha --report lcovonly -- -u tdd && cat ./coverage/lcov.info | coveralls"},"_npmUser":{"name":"jordansexton","email":"jordan@jordansexton.com"},"repository":{"url":"git+https://github.com/pabigot/buffer-layout.git","type":"git"},"_npmVersion":"6.14.15","description":"Translation between JavaScript values and Buffers","directories":{},"_nodeVersion":"14.18.1","dependencies":{"buffer":"~6.0.3"},"_hasShrinkwrap":false,"devDependencies":{"shx":"^0.3.3","jsdoc":"~3.5.5","mocha":"~5.0.4","eslint":"~7.30.0","lodash":"~4.17.5","typedoc":"^0.22.10","gh-pages":"^3.2.3","istanbul":"~0.4.5","coveralls":"^3.0.0","typescript":"^4.4.4","@typescript-eslint/parser":"^4.28.2","@typescript-eslint/eslint-plugin":"^4.28.2"},"_npmOperationalInternal":{"tmp":"tmp/buffer-layout_4.0.0_1639517346258_0.33956029181005","host":"s3://npm-registry-packages"}},"4.0.1":{"name":"@solana/buffer-layout","version":"4.0.1","keywords":["Buffer","struct","endian","pack data"],"author":{"name":"Peter A. Bigot","email":"pab@pabigot.com"},"license":"MIT","_id":"@solana/buffer-layout@4.0.1","maintainers":[{"name":"ngundotra","email":"noah@gundotra.org"},{"name":"_chido","email":"yihau.chen@solana.com"},{"name":"steveluscher","email":"me+npm@steveluscher.com"},{"name":"sebastianbor","email":"sebastian_bor@hotmail.com"},{"name":"seanyoung","email":"sean@mess.org"},{"name":"mvines","email":"mvines@gmail.com"},{"name":"jack-solana","email":"jack@solana.com"},{"name":"tyera","email":"tyera@solana.com"},{"name":"joncinque","email":"me@jonc.dev"},{"name":"bartosz-lipinski","email":"bartosz@solana.com"},{"name":"ryoqun","email":"ryoqun@gmail.com"},{"name":"trent-solana","email":"trent@solana.com"},{"name":"jordansexton","email":"jordan@jordansexton.com"}],"homepage":"https://github.com/solana-labs/buffer-layout","bugs":{"url":"https://github.com/solana-labs/buffer-layout/issues"},"dist":{"shasum":"b996235eaec15b1e0b5092a8ed6028df77fa6c15","tarball":"https://registry.npmjs.org/@solana/buffer-layout/-/buffer-layout-4.0.1.tgz","fileCount":6,"integrity":"sha512-E1ImOIAD1tBZFRdjeM4/pzTiTApC0AOBGwyAMS4fwIodCWArzJ3DWdoh8cKxeFM2fElkxBh2Aqts1BPC373rHA==","signatures":[{"sig":"MEUCIQDeQjgn5QOxjx5HvYtcb0AkHyWYMcxf5/9O6c8VdB6zLAIgQtdZXTafnMNDNFFLK9E096Ufh9lvlSmlBULsqeVwSaE=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":197207,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjk2czACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpIcQ//YAG3OjMP7zg8zyFHHkFh24byB9CSJByMsxuClWZRFxOnbGpY\r\nFnE5iEATxIdIHsQG8NAHlJdZXsHajNPAVJK79eTHtDuGhdQ0VLSkBPZfUnMo\r\njXTIhFEuubpd88dEr/iHpZmyVI3mzqNkS8AQ+qG4Ew/P1li3HdszK1wxk++N\r\nHdO6kbnlg0dE83Jj5N7LL25f/oO828nD35rIEWBJUYqlIjfB1CWmvLNqM/3Z\r\nn5t4VJgnSJaG+ZhBnxPKTUcIdJHCuXxNJsdWp88eT5Cdn5NU2i28H97w8oXH\r\n57QaH0keJynLSdRWXIosXamAhUMH3aUtgdQcC6Ypd+xDz5dEkWjYJd5mwMDy\r\ngaUTrIHW6AE8UAaaqjixeMmX+XqBKrKxi2DWQZVLSVjmzdggBUJQaDb7c2v+\r\nxVohQAPjQylZj8kKAPgCjYOvni53XmP8syYd73wCWafXHAP6zl1BGsltnDoZ\r\np6KIedyHs44N2gV2oRivs9L8u7hIgm1KZKZdRVKp+bK2VGqUeCxrwIoFbiWZ\r\nieWBSz6S0EW1tmA7WfXlvfl6aXqY3QDU995yaiXeqKzkiWfDKU5a/Lz4yNT3\r\nC/4WCvfSQMljd+JoT/7AZ7Cq3t/gx3fVLV4rLGkjWr7GCYh5I3ZTW11HPIfh\r\no6/SaRwGfQq6Hu0t36qKJZdCFQ5CF9+ev58=\r\n=6yQo\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./lib/Layout.js","types":"./lib/Layout.d.ts","engines":{"node":">=5.10"},"gitHead":"72946cea49eb999dbdd04281c6946adb873be4f1","scripts":{"docs":"shx rm -rf docs && typedoc && shx cp .nojekyll docs/","test":"npm run build && mocha -u tdd","build":"tsc","jsdoc":"jsdoc -c jsdoc/conf.json","pages":"gh-pages --dist docs --dotfiles","eslint":"eslint src/ --ext .ts","prepare":"npm run build","coverage":"npm run build && istanbul cover _mocha -- -u tdd","coveralls":"npm run build && istanbul cover _mocha --report lcovonly -- -u tdd && cat ./coverage/lcov.info | coveralls"},"_npmUser":{"name":"steveluscher","email":"me+npm@steveluscher.com"},"repository":{"url":"git+https://github.com/solana-labs/buffer-layout.git","type":"git"},"_npmVersion":"8.19.2","description":"Translation between JavaScript values and Buffers","directories":{},"_nodeVersion":"16.18.1","dependencies":{"buffer":"~6.0.3"},"_hasShrinkwrap":false,"devDependencies":{"shx":"^0.3.3","jsdoc":"~3.5.5","mocha":"~5.0.4","eslint":"~7.30.0","lodash":"~4.17.5","typedoc":"^0.22.10","gh-pages":"^3.2.3","istanbul":"~0.4.5","coveralls":"^3.0.0","typescript":"^4.4.4","@typescript-eslint/parser":"^4.28.2","@typescript-eslint/eslint-plugin":"^4.28.2"},"_npmOperationalInternal":{"tmp":"tmp/buffer-layout_4.0.1_1670604595760_0.4096734583179693","host":"s3://npm-registry-packages"}}},"time":{"created":"2021-07-08T23:04:38.011Z","modified":"2024-06-10T18:30:01.772Z","3.0.0":"2021-07-08T23:04:38.504Z","4.0.0":"2021-12-14T21:29:06.488Z","4.0.1":"2022-12-09T16:49:55.927Z"},"maintainers":[{"email":"mcintyre1994@gmail.com","name":"mcintyre94"},{"email":"hana@solana.com","name":"2501babe"},{"email":"loris.leiva@gmail.com","name":"lorisleiva"},{"email":"joe.caulfield@anza.xyz","name":"buffalojoec"},{"email":"noah@gundotra.org","name":"ngundotra"},{"email":"yihau.chen@solana.com","name":"_chido"},{"email":"me+npm@steveluscher.com","name":"steveluscher"},{"email":"sean@mess.org","name":"seanyoung"},{"email":"tyera@solana.com","name":"tyera"},{"email":"me@jonc.dev","name":"joncinque"},{"email":"ryoqun@gmail.com","name":"ryoqun"},{"email":"trent@solana.com","name":"trent-solana"},{"email":"jordan@jordansexton.com","name":"jordansexton"}],"author":{"name":"Peter A. Bigot","email":"pab@pabigot.com"},"repository":{"url":"git+https://github.com/solana-labs/buffer-layout.git","type":"git"},"keywords":["Buffer","struct","endian","pack data"],"license":"MIT","homepage":"https://github.com/solana-labs/buffer-layout","bugs":{"url":"https://github.com/solana-labs/buffer-layout/issues"},"readme":"# @solana/buffer-layout\n\n`@solana/buffer-layout` is a TypeScript fork of `buffer-layout`. Same API, just adds types and TypeScript docs.\n\n## Installation\n\nInstall with `npm install @solana/buffer-layout`.\n\nDevelopment and testing is done using Node.js, supporting versions 5.10\nand later.\n\n# buffer-layout\n\n[![NPM version](https://img.shields.io/npm/v/buffer-layout.svg)](https://www.npmjs.com/package/buffer-layout \"View this project on NPM\")\n[![Build Status](https://travis-ci.org/pabigot/buffer-layout.svg?branch=master)](https://travis-ci.org/pabigot/buffer-layout \"Check build status on TravisCI\")\n[![Coverage Status](https://coveralls.io/repos/pabigot/buffer-layout/badge.svg?branch=master&service=github)](https://coveralls.io/github/pabigot/buffer-layout?branch=master \"Check coverage status on Coveralls\")\n\nbuffer-layout is a utility module implemented in pure JavaScript that\nsupports translations between JavaScript values and Buffers.  It is made\navailable through [github](https://github.com/pabigot/buffer-layout) and\nreleased under the MIT license.\n\nLayout support is provided for these types of data:\n\n* Signed and unsigned integral values from 1 to 6 bytes in length, in\n  little-endian or big-endian format;\n* Signed and unsigned 64-bit integral values decoded as integral\n  Numbers;\n* Float and double values (also little-endian or big-endian);\n* Sequences of instances of an arbitrary layout, with constant or\n  data-dependent length;\n* Structures with named fields containing arbitrary layouts;\n* Unions of variant layouts where the type of data is recorded in a\n  prefix value, another layout element, or provided externally;\n* Bit fields within 8, 16, 24, or 32-bit unsigned integers, numbering\n  from the least or most significant bit;\n* NUL-terminated C strings;\n* Blobs of fixed or variable-length raw data.\n\n## Examples\n\nAll examples are from the `test/examples.js` unit test and assume the\nfollowing context:\n\n    const assert = require('assert');\n    const util = require('util');\n    const lo = require('buffer-layout');\n\nThe examples give only a taste of what can be done.  Structures, unions,\nand sequences can nest; [union\ndiscriminators](http://pabigot.github.io/buffer-layout/module-Layout-UnionDiscriminator.html)\ncan be within the union or external to it; sequence and blob lengths may\nbe fixed or read from the buffer.\n\nFor full details see the [documentation](http://pabigot.github.io/buffer-layout/).\n\n### Four-element array of 16-bit signed little-endian integers\n\nThe C definition:\n\n    int16_t arr[4] = { 1, -1, 3, -3 };\n\nThe buffer-layout way:\n\n    const ds = lo.seq(lo.s16(), 4);\n    const b = Buffer.alloc(8);\n    assert.equal(ds.encode([1, -1, 3, -3], b), 4 * 2);\n    assert.equal(Buffer.from('0100ffff0300fdff', 'hex').compare(b), 0);\n    assert.deepEqual(ds.decode(b), [1, -1, 3, -3]);\n\nSee [Int](http://pabigot.github.io/buffer-layout/module-Layout-Int.html)\nand [Sequence](http://pabigot.github.io/buffer-layout/module-Layout-Sequence.html).\n\n### A native C `struct` on a 32-bit little-endian machine\n\nThe C definition:\n\n    struct ds {\n      uint8_t v;\n      uint32_t u32;\n    } st;\n\nThe buffer-layout way:\n\n    const ds = lo.struct([lo.u8('v'),\n                        lo.seq(lo.u8(), 3), // alignment padding\n                        lo.u32('u32')]);\n    assert.equal(ds.offsetOf('u32'), 4);\n    const b = Buffer.alloc(8);\n    b.fill(0xbd);\n    assert.equal(ds.encode({v: 1, u32: 0x12345678}, b), 1 + 3 + 4);\n    assert.equal(Buffer.from('01bdbdbd78563412', 'hex').compare(b), 0);\n    assert.deepEqual(ds.decode(b), {v: 1, u32: 0x12345678});\n\nNote that the C language requires padding which must be explicitly added\nin the buffer-layout structure definition.  Since the padding is not\naccessible, the corresponding layout has no\n[property](http://pabigot.github.io/buffer-layout/module-Layout-Layout.html#property).\n\nSee [Structure](http://pabigot.github.io/buffer-layout/module-Layout-Structure.html).\n\n### A packed C `struct` on a 32-bit little-endian machine\n\nThe C definition:\n\n    struct ds {\n      uint8_t v;\n      uint32_t u32;\n    } __attribute__((__packed__)) st;\n\nThe buffer-layout way:\n\n    const ds = lo.struct([lo.u8('v'),\n                        lo.u32('u32')]);\n    assert.equal(ds.offsetOf('u32'), 1);\n    const b = Buffer.alloc(5);\n    b.fill(0xbd);\n    assert.equal(ds.encode({v: 1, u32: 0x12345678}, b), 1 + 4);\n    assert.equal(Buffer.from('0178563412', 'hex').compare(b), 0);\n    assert.deepEqual(ds.decode(b), {v: 1, u32: 0x12345678});\n\n### A tagged union of 4-byte values\n\nAssume a 5-byte packed structure where the interpretation of the last\nfour bytes depends on the first byte.  The C definition:\n\n    struct {\n      uint8_t t;\n      union ds {\n        uint8_t u8[4];  // default interpretation\n        int16_t s16[2]; // when t is 'h'\n        uint32_t u32;   // when t is 'w'\n        float f32;      // when t is 'f'\n      } u;\n    } __attribute__((__packed__)) un;\n\nThe buffer-layout way:\n\n    const t = lo.u8('t');\n    const un = lo.union(t, lo.seq(lo.u8(), 4, 'u8'));\n    const nul = un.addVariant('n'.charCodeAt(0), 'nul');\n    const u32 = un.addVariant('w'.charCodeAt(0), lo.u32(), 'u32');\n    const s16 = un.addVariant('h'.charCodeAt(0), lo.seq(lo.s16(), 2), 's16');\n    const f32 = un.addVariant('f'.charCodeAt(0), lo.f32(), 'f32');\n    const b = Buffer.alloc(un.span);\n    assert.deepEqual(un.decode(b), {t: 0, u8: [0, 0, 0, 0]});\n    assert.deepEqual(un.decode(Buffer.from('6e01020304', 'hex')),\n                     {nul: true});\n    assert.deepEqual(un.decode(Buffer.from('7778563412', 'hex')),\n                     {u32: 0x12345678});\n    assert.deepEqual(un.decode(Buffer.from('660000bd41', 'hex')),\n                     {f32: 23.625});\n    assert.deepEqual(un.decode(Buffer.from('a5a5a5a5a5', 'hex')),\n                     {t: 0xa5, u8: [0xa5, 0xa5, 0xa5, 0xa5]});\n    assert.equal(s16.encode({s16: [123, -123]}, b), 1 + 2 * 2);\n    assert.equal(Buffer.from('687b0085ff', 'hex').compare(b), 0);\n\nSee [Union](http://pabigot.github.io/buffer-layout/module-Layout-Union.html).\n\n### Decoding into class instances\n\nUsing the same 5-byte packet structure but with JavaScript classes\nrepresenting the union and the variants:\n\n    function Union() { }\n    lo.bindConstructorLayout(Union,\n                             lo.union(lo.u8('t'), lo.seq(lo.u8(), 4, 'u8')));\n\n    function Vn() {}\n    util.inherits(Vn, Union);\n    lo.bindConstructorLayout(Vn,\n                             Union.layout_.addVariant('n'.charCodeAt(0), 'nul'));\n\n    function Vu32(v) { this.u32 = v; }\n    util.inherits(Vu32, Union);\n    lo.bindConstructorLayout(Vu32,\n                             Union.layout_.addVariant('w'.charCodeAt(0), lo.u32(), 'u32'));\n\n    function Vs16(v) { this.s16 = v; }\n    util.inherits(Vs16, Union);\n    lo.bindConstructorLayout(Vs16,\n                             Union.layout_.addVariant('h'.charCodeAt(0), lo.seq(lo.s16(), 2), 's16'));\n\n    function Vf32(v) { this.f32 = v; }\n    util.inherits(Vf32, Union);\n    lo.bindConstructorLayout(Vf32,\n                             Union.layout_.addVariant('f'.charCodeAt(0), lo.f32(), 'f32'));\n\n    let v = Union.decode(Buffer.from('7778563412', 'hex'));\n    assert(v instanceof Vu32);\n    assert(v instanceof Union);\n    assert.equal(v.u32, 0x12345678);\n\n    v = Union.decode(Buffer.from('a5a5a5a5a5', 'hex'));\n    assert(v instanceof Union);\n    assert.equal(v.t, 0xa5);\n    assert.deepEqual(v.u8, [0xa5, 0xa5, 0xa5, 0xa5]);\n\n    const b = Buffer.alloc(Union.layout_.span);\n    v = new Vf32(23.625);\n    v.encode(b);\n    assert.equal(Buffer.from('660000bd41', 'hex').compare(b), 0);\n\n    b.fill(0xFF);\n    v = new Vn();\n    v.encode(b);\n    assert.equal(Buffer.from('6effffffff', 'hex').compare(b), 0);\n\nNote that one variant (`'n'`) carries no data, leaving the remainder of\nthe buffer unchanged when stored.\n\nSee\n[Layout.makeDestinationObject()](http://pabigot.github.io/buffer-layout/module-Layout-Layout.html#makeDestinationObject)\nand\n[bindConstructorLayout](http://pabigot.github.io/buffer-layout/module-Layout.html#.bindConstructorLayout).\n\n### Packed bit fields on a little-endian machine\n\nThe C definition:\n\n    struct ds {\n      unsigned int b00l03: 3;\n      unsigned int flg03: 1;\n      unsigned int b04l18: 24;\n      unsigned int b1Cl04: 4;\n    } st;\n\nThe buffer-layout way:\n\n    const ds = lo.bits(lo.u32());\n    const b = Buffer.alloc(4);\n    ds.addField(3, 'b00l03');\n    ds.addBoolean('flg03');\n    ds.addField(24, 'b04l18');\n    ds.addField(4, 'b1Cl04');\n    b.fill(0xff);\n    assert.equal(ds.encode({b00l03: 3, b04l18: 24, b1Cl04: 4}, b), 4);\n    assert.equal(Buffer.from('8b010040', 'hex').compare(b), 0);\n    assert.deepEqual(ds.decode(b),\n                     {b00l03: 3, flg03: true, b04l18: 24, b1Cl04: 4});\n\nSee [BitStructure](http://pabigot.github.io/buffer-layout/module-Layout-BitStructure.html).\n\n### 64-bit values as Numbers\n\nThe C definition:\n\n    uint64_t v = 0x0102030405060708ULL;\n\nThe buffer-layout way:\n\n    const ds = lo.nu64be();\n    const b = Buffer.from('0102030405060708', 'hex');\n    const v = 72623859790382856;\n    const nv = v - 6;\n    assert.equal(v, nv);\n    assert.equal(ds.decode(b), nv);\n\nNote that because the exact value is not less than 2^53 it cannot be\nrepresented as a JavaScript Number, and is instead approximated by a\nnearby representable integer that is equivalent within Numbers.\n\nSee [NearUInt64](http://pabigot.github.io/buffer-layout/module-Layout-NearUInt64.html).\n\n### A NUL-terminated C string\n\nThe C definition:\n\n    const char str[] = \"hi!\";\n\nThe buffer-layout way:\n\n    const ds = lo.cstr();\n    const b = Buffer.alloc(8);\n    assert.equal(ds.encode('hi!', b), 3 + 1);\n    const slen = ds.getSpan(b);\n    assert.equal(slen, 4);\n    assert.equal(Buffer.from('68692100', 'hex').compare(b.slice(0, slen)), 0);\n    assert.equal(ds.decode(b), 'hi!');\n\nSee [CString](http://pabigot.github.io/buffer-layout/module-Layout-CString.html).\n\n### A fixed-length block of data offset within a buffer\n\nThe buffer-layout way:\n\n    const ds = lo.blob(4);\n    const b = Buffer.from('0102030405060708', 'hex');\n    assert.equal(Buffer.from('03040506', 'hex').compare(ds.decode(b, 2)), 0);\n\nSee [Blob](http://pabigot.github.io/buffer-layout/module-Layout-Blob.html).\n\n### A variable-length array of pairs of C strings\n\nThe buffer-layout way:\n\n    const pr = lo.seq(lo.cstr(), 2);\n    const n = lo.u8('n');\n    const vla = lo.seq(pr, lo.offset(n, -1), 'a');\n    const st = lo.struct([n, vla], 'st');\n    const b = Buffer.alloc(32);\n    const arr = [['k1', 'v1'], ['k2', 'v2'], ['k3', 'etc']];\n    b.fill(0);\n    assert.equal(st.encode({a: arr}, b),\n                 1 + (2 * ((2 + 1) + (2 + 1)) + (2 + 1) + (3 + 1)));\n    const span = st.getSpan(b);\n    assert.equal(span, 20);\n    assert.equal(Buffer.from('036b31007631006b32007632006b330065746300', 'hex')\n                 .compare(b.slice(0, span)), 0);\n    assert.deepEqual(st.decode(b), {n: 3, a: arr});\n\nSee [OffsetLayout](http://pabigot.github.io/buffer-layout/module-Layout-OffsetLayout.html).\n\n### A C flexible array member with implicit length\n\nWhen data is obtained over a packetized interface the length of the\npacket can provide implicit limits on the last field.\n\nThe C definition:\n\n    struct ds {\n      uint8_t prop;\n      uint16_t data[];\n    };\n\nThe buffer-layout way:\n\n    const st = lo.struct([lo.u8('prop'),\n                        lo.seq(lo.u16(),\n                               lo.greedy(lo.u16().span),\n                               'data')],\n                       'ds');\n    const b = Buffer.from('21010002030405', 'hex');\n    assert.deepEqual(st.decode(b), {prop: 33, data: [0x0001, 0x0302, 0x0504]});\n    b.fill(0xFF);\n    assert.equal(st.encode({prop: 9, data: [5, 6]}, b), 1 + 2 * 2);\n    assert.equal(Buffer.from('0905000600FFFF', 'hex').compare(b), 0);\n\n### Tagged values, or variable-length unions\n\nStoring arbitrary data using a leading byte to identify the content then\na value that takes up only as much room as is necessary.\n\nThe example also shows how to extend the variant recognition API to\nsupport abitrary constant without consuming space for them in the\nencoded union.  This could be used to make something similar to\n[BSON](http://bsonspec.org/spec.html).\n\nHere's the code that defines the union, the variants, and the\nrecognition of `true` and `false` values for `b` as distinct variants:\n\n    const un = lo.union(lo.u8('t'));\n    const u8 = un.addVariant('B'.charCodeAt(0), lo.u8(), 'u8');\n    const s16 = un.addVariant('h'.charCodeAt(0), lo.s16(), 's16');\n    const s48 = un.addVariant('Q'.charCodeAt(0), lo.s48(), 's48');\n    const cstr = un.addVariant('s'.charCodeAt(0), lo.cstr(), 'str');\n    const tr = un.addVariant('T'.charCodeAt(0), lo.const(true), 'b');\n    const fa = un.addVariant('F'.charCodeAt(0), lo.const(false), 'b');\n    const b = Buffer.alloc(1 + 6);\n    un.configGetSourceVariant(function(src) {\n      if (src.hasOwnProperty('b')) {\n        return src.b ? tr : fa;\n      }\n      return this.defaultGetSourceVariant(src);\n    });\n\nAnd here are examples of encoding, checking the encoded length, and\ndecoding each of the alternatives:\n\n    b.fill(0xff);\n    assert.equal(un.encode({u8: 1}, b), 1 + 1);\n    assert.equal(un.getSpan(b), 2);\n    assert.equal(Buffer.from('4201ffffffffff', 'hex').compare(b), 0);\n    assert.equal(un.decode(b).u8, 1);\n\n    b.fill(0xff);\n    assert.equal(un.encode({s16: -32000}, b), 1 + 2);\n    assert.equal(un.getSpan(b), 3);\n    assert.equal(Buffer.from('680083ffffffff', 'hex').compare(b), 0);\n    assert.equal(un.decode(b).s16, -32000);\n\n    b.fill(0xff);\n    const v48 = Math.pow(2, 47) - 1;\n    assert.equal(un.encode({s48: v48}, b), 1 + 6);\n    assert.equal(un.getSpan(b), 7);\n    assert.equal(Buffer.from('51ffffffffff7f', 'hex').compare(b), 0);\n    assert.equal(un.decode(b).s48, v48);\n\n    b.fill(0xff);\n    assert.equal(un.encode({b: true}, b), 1);\n    assert.equal(un.getSpan(b), 1);\n    assert.equal(Buffer.from('54ffffffffffff', 'hex').compare(b), 0);\n    assert.strictEqual(un.decode(b).b, true);\n\n    b.fill(0xff);\n    assert.equal(un.encode({b: false}, b), 1);\n    assert.equal(un.getSpan(b), 1);\n    assert.equal(Buffer.from('46ffffffffffff', 'hex').compare(b), 0);\n    assert.strictEqual(un.decode(b).b, false);\n\n**NOTE** This code tickles a long-standing [bug in\nBuffer.writeInt{L,B}E](https://github.com/nodejs/node/pull/3994); if you\nare using Node prior to 4.2.4 or 5.2.0 you should update.\n","readmeFilename":"README.md"}